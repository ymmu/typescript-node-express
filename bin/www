#!/usr/bin/env node
"use strict";

// bin/www : Express + Node.js 설정파일

//module dependencies
var server = require("../dist/server");
var debug = require("debug")("funwork-api:server");
var http = require("http");

//create http server
var httpPort = normalizePort(process.env.PORT || 3000);
var app = server.Server.bootstrap().app;
app.set("port", httpPort);
var httpServer = http.createServer(app);

//listen on provided ports
httpServer.listen(httpPort);

//add error handler
httpServer.on("error", onError);

//start listening on port
httpServer.on("listening", onListening);


/*
  Normalize a port into a number, string, or false.
  normalizePort() 는 받아드리는 포트를 설정 한다.
  process.env.PORT 설정에 설정 되어있지 않다면 디폴트로 8080 을 사용한다.
*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
  Event listener for HTTP server "error" event.
  onError() : 잡히지 않은 예외가 던져질때 호출되는 함수
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*
  Event listener for HTTP server "listening" event.
  onListening()은 서버가 성공적으로 시작되면 한번만 호출된다.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}